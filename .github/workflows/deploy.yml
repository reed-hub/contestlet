name: üöÄ Contestlet Deployment Pipeline

on:
  push:
    branches:
      - develop      # Triggers development testing
      - staging      # Triggers staging deployment  
      - main         # Triggers production deployment
  pull_request:
    branches:
      - develop      # Test PRs to develop branch

env:
  PYTHON_VERSION: "3.11"

jobs:
  # üß™ Testing Job (runs for all branches)
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: üì¶ Checkout Code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üìö Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: üîç Run Linting
      run: |
        pip install flake8 black
        flake8 app/ --max-line-length=100
        black --check app/
        
    - name: üß™ Run Unit Tests
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml
        
    - name: üìä Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # üß™ Deploy to Staging
  deploy-staging:
    name: üß™ Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging-api.contestlet.com
      
    steps:
    - name: üì¶ Checkout Code
      uses: actions/checkout@v4
      
    - name: üîß Setup Environment
      run: |
        echo "ENVIRONMENT=staging" >> $GITHUB_ENV
        echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> $GITHUB_ENV
        
    - name: üöÄ Deploy to Staging Server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/contestlet
          ./scripts/deploy-staging.sh
          
    - name: üè• Health Check
      run: |
        sleep 30
        curl -f https://staging-api.contestlet.com/health
        
    - name: üí® Run Smoke Tests
      run: |
        python scripts/smoke_tests.py --env=staging
        
    - name: üì¢ Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # üèÜ Deploy to Production
  deploy-production:
    name: üèÜ Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://api.contestlet.com
      
    steps:
    - name: üì¶ Checkout Code
      uses: actions/checkout@v4
      
    - name: ‚ö†Ô∏è Production Deployment Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: matthewreed  # Replace with actual usernames
        minimum-approvals: 1
        issue-title: "Production Deployment Approval Required"
        issue-body: |
          üèÜ **Production Deployment Request**
          
          **Branch**: ${{ github.ref }}
          **Commit**: ${{ github.sha }}
          **Author**: ${{ github.actor }}
          
          **Changes**: 
          ${{ github.event.head_commit.message }}
          
          Please review and approve this production deployment.
          
    - name: üíæ Create Database Backup
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          pg_dump $PRODUCTION_DATABASE_URL > /backups/pre-deploy-$(date +%Y%m%d-%H%M%S).sql
          
    - name: üöÄ Deploy to Production Server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/contestlet
          ./scripts/deploy-production.sh
          
    - name: üè• Production Health Check
      run: |
        sleep 60
        for i in {1..10}; do
          if curl -f https://api.contestlet.com/health; then
            echo "‚úÖ Production health check passed"
            break
          else
            echo "‚è≥ Health check attempt $i/10 failed, retrying..."
            sleep 10
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Production health check failed!"
            exit 1
          fi
        done
        
    - name: üí® Production Smoke Tests
      run: |
        python scripts/smoke_tests.py --env=production
        
    - name: üìä Update Monitoring
      run: |
        curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{
            "status": "deployed",
            "version": "${{ github.sha }}",
            "environment": "production",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          }'
          
    - name: üì¢ Notify Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            "text": "üéâ Production deployment successful!",
            "attachments": [{
              "color": "good",
              "fields": [{
                "title": "Version",
                "value": "${{ github.sha }}",
                "short": true
              }, {
                "title": "Author", 
                "value": "${{ github.actor }}",
                "short": true
              }]
            }]
          }
          
    - name: üö® Notify Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            "text": "üö® Production deployment FAILED!",
            "attachments": [{
              "color": "danger",
              "fields": [{
                "title": "Version",
                "value": "${{ github.sha }}",
                "short": true
              }, {
                "title": "Author",
                "value": "${{ github.actor }}",
                "short": true
              }]
            }]
          }

  # üîÑ Auto-merge develop to staging (optional)
  auto-promote:
    name: üîÑ Auto-promote to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: üì¶ Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üîÑ Merge develop to staging
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        git checkout staging
        git merge origin/develop --no-ff -m "Auto-merge develop to staging"
        git push origin staging
